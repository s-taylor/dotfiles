global !p
def formatVariableName(path):
  lastPart = path.split('/')[-1]
  if lastPart == 'underscore' or lastPart == 'lodash':
    return '_'
  elif lastPart == 'jquery':
    return '$'
  else:
    return re.sub(r'[_\-]', '', lastPart.title())
endglobal

snippet cl "console.log('var', var)" b
console.log('$1', $1);$0
endsnippet

snippet cy "console.log('<yank>', <yank>)"
console.log('${1:`!v @"`}', $1);$0
endsnippet

snippet cm "console.log(message)" b
console.log('$1');$0
endsnippet

snippet ca "console.log(args)"
console.log('$1 args', Array.prototype.slice.call(arguments));$0
endsnippet

snippet re "require" b
const `!p
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet im "require" b
import `!p
snip.rv = formatVariableName(t[1])
` from '${1}';$0
endsnippet

snippet for "for (...) {...}" b
for (var i = 0; ${1:myArray}.length < i; i++) {
  $0
}
endsnippet

#############
# FUNCTIONS #
#############

snippet fn "function" b
function ${1:functionName}(${2:parameters}}) {
  ${VISUAL}$0
}
endsnippet

snippet vf "function assigned to var" b
const ${2:functionName} = function(${3:parameters}) {
  ${VISUAL}$0
}
endsnippet

snippet af "anonymous function" i
function(${1:parameters}}) {
  ${VISUAL}$0
}
endsnippet

snippet => "arrow function (multiline)"
const ${1:constName} = (${2:parameters}}) => {
  ${VISUAL}$0
}
endsnippet

###########
# OBJECTS #
###########

snippet ob "object"
const ${1:objectName} = {
  $0
}
endsnippet

snippet :f "object method"
${1:methodName}: function(${3:attribute}) {
  ${VISUAL}$0
}
endsnippet

snippet : "object key and value"
${1:key}: ${2:value}$0
endsnippet

snippet :, "object key and value"
${1:key}: ${2:value},$0
endsnippet

snippet m "object method (prototype)"
${1:ClassName}.prototype.${2:methodName} = function(${3:parameters}) {
  ${VISUAL}$0
}
endsnippet

#########
# MOCHA #
#########

snippet de "describe block"
describe('${1:description}', () => {
  ${VISUAL}$0
});
endsnippet

snippet it "it block"
it('${1:statement}', () => {
  ${VISUAL}$0
});
endsnippet

############
# PROMISES #
############

snippet pr "promise"
new Promise((resolve, reject) => {
  $0
});
endsnippet

snippet th "then"
.then(${1:result} => {
  $0
})
endsnippet

snippet pt "passthrough (.then)"
.then(result => {
  console.log('.then', result);
  return result;
})$0
endsnippet

snippet ct "catch"
.catch(err => {
	console.log('.catch:', err);
	throw err;
})$0
endsnippet


#########
# REACT #
#########
snippet class "React Component - ES6 Class"
import React, { Component, PropTypes } from 'react';

class ${1:ComponentName} extends Component {
  constructor(props) {
    super(props);
    this.state = { ... };
  }

  render() {
    return (
      <p>Hello World</p>$0
    );
  }
}

$1.propTypes = {
  
};

$1.defaultProps = {
  
};

export default $1;
endsnippet

snippet createClass "React Component - .createClass"
import React, { PropTypes } from 'react';

const ${1:ComponentName} = React.createClass({
  propTypes: {
    
  },

  getDefaultProps() {
    return {
      
    };
  },

  getInitialState() {
    return {
      
    };
  },

  render() {
    return (
      <p>Hello World</p>$0
    );
  },
});

export default $1;
endsnippet

snippet component "React Component"
import React, { PropTypes } from 'react';

const ${1:ComponentName} = ({ children }) => 
  <p>{children}</p>;

$1.propTypes = { children: PropTypes.string };
$1.defaultProps = { children: 'Hello World!' };

export default $1;
endsnippet

snippet setStateAsync "setStateAsync function"
setStateAsync(state) {
  const self = this;
  return new Promise((resolve, reject) =>
    self.setState(state, (err, res) => {
      if (err) return reject(err);
      return resolve(res);
    })
  );
},
endsnippet

###########
# ES LINT #
###########
snippet disable "eslint disable rule on line" b
// eslint-disable-next-line ${1:Rule}$0
endsnippet

snippet disableblock "eslint disable rule block" b
/* eslint-disable ${1:Rule} */
  $0
/* eslint-enable $1 */
endsnippet
