global !p
def formatVariableName(path):
  lastPart = path.split('/')[-1]
  if lastPart == 'underscore' or lastPart == 'lodash':
    return '_'
  elif lastPart == 'jquery':
    return '$'
  else:
    return re.sub(r'[_\-]', '', lastPart.title())
endglobal

snippet cl "console.log('var', var)" b
console.log('$1', $1);$0
endsnippet

snippet cm "console.log(message)" b
console.log('$1');$0
endsnippet

snippet re "require" b
const `!p
snip.rv = formatVariableName(t[1])
` = require("${1}");$0
endsnippet

snippet im "require" b
import `!p
snip.rv = formatVariableName(t[1])
` from '${1}';$0
endsnippet

snippet for "for (...) {...}" b
for (var i = 0; ${1:myArray}.length < i; i++) {
  $0
}
endsnippet

#############
# FUNCTIONS #
#############

snippet fn "function" b
function ${1:functionName}(${2:arguements}) {
  ${VISUAL}$0
}
endsnippet

snippet vf "function assigned to var" b
const ${2:function_name} = function(${3:arguements}) {
  ${VISUAL}$0
}
endsnippet

snippet af "anonymous function" i
function(${1:arguements}) {
  ${VISUAL}$0
}
endsnippet

snippet => "arrow function (multiline)"
const ${1:name} = (${2:arguements}) => {
  ${VISUAL}$0
}
endsnippet

###########
# OBJECTS #
###########

snippet ob "object"
const ${1:objectName} = {
  $0
}
endsnippet

snippet :f "object method"
${1:method_name}: function(${3:attribute}) {
  ${VISUAL}$0
}
endsnippet

snippet : "object key and value"
${1:key}: ${2:value}$0
endsnippet

snippet :, "object key and value"
${1:key}: ${2:value},$0
endsnippet

snippet m "object method (prototype)"
${1:ClassName}.prototype.${2:methodName} = function(${3:arguements}) {
  ${VISUAL}$0
}
endsnippet

#########
# MOCHA #
#########

snippet de "describe block"
describe('${1}', () => {
  ${VISUAL}$0
});
endsnippet

snippet it "it block"
it('${1}', () => {
  ${VISUAL}$0
});
endsnippet

############
# PROMISES #
############

snippet ct "catch"
.catch((e) => console.log('ERROR:', e))
endsnippet
